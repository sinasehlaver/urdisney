#include "spline.h"
#include <fstream>
#include <moveit/move_group_interface/move_group_interface.h>

// //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// FUNCTION DEFINITIONS

// description: returns current joint values after confirming them
// can be used to get the confirmed robot state and also to poll for the confirmation of the joint states
std::vector<double> getConfirmedJointValues(moveit::planning_interface::MoveGroupInterface &targetGroup);

// description: Imports JS keyframes from file.
bool importKeyframes(std::vector<std::vector<double>>  &framesIn, std::string fileName);

// description: Imports a single JS keyframe from file.
bool importSingleFrame(std::vector<double>  &configuration, std::string fileName);

// description: Imports a single robot pose from file to geometry_msgs::Pose.
bool importSinglePose(geometry_msgs::Pose &robotPose, std::string fileName);

// description: Exports joint space (JS) keyframes into file. Each row is a keyframe; each column is a DOF.
// The file is has one extra empty line with at the end.
void exportFrames(std::vector<std::vector<double>> framesOut, std::string fileName);

// description: exports a vector into a file with the fileName
void exportVector(std::vector<double> vector, std::string fileName);

// description: exports a section of a RobotTrajectory into a file with the fileName. the section choice is input with the argument exportType.
void exportTrajectory(moveit_msgs::RobotTrajectory trajectoryOut, char exportType, std::string fileName);

// description: Interpolates line segments in joint space through keyframes with fixed step size in y-axis 
std::vector<std::vector<double>> interpolateLinear(std::vector<std::vector<double>> frames, float maxStepSize);

// description: Interpolates a cubic spline through the keyframes in joint space for all degrees of freedom.
// note: The step size is currently fixed in the time (x-) axis. It better be fixed with a maximum change for the y-axis.
// note2: Instead of using fixed step sizes, interpolation can be made denser when necessary; and more sparse if the trajectory is mostly linear. 
// note3: Using a very small stepSize (eg. 0.002) for x-axis causes a lot of glitches in the velocities generated by the IPTP.
// keeping it larger reduces these glitches.
std::vector<std::vector<double>> interpolateCubic(std::vector<std::vector<double>> frames);

std::vector<std::vector<double>> interpolateCubicScaled(std::vector<std::vector<double>> frames);

// TODO: description
std::vector<std::vector<double>> interpolateCubicV2(std::vector<std::vector<double>> frames);

moveit::planning_interface::MoveGroupInterface::Plan concatenatePlans
	(moveit::planning_interface::MoveGroupInterface::Plan planA, moveit::planning_interface::MoveGroupInterface::Plan planB);